COMMENTS {
	- use "//" for a single line comment, may be placed at any point in the line, code before the comment will be executed as normal
	
	- no block comments
}

DATA TYPES {
	- strings
	- numbers
	- lists
	- dictionaries
	- functions
}

INSTANTIATING PRIMITIVES {
	strings {
		use double quotes: ""
	}

	numbers {
		type a number
		optionally use either "0x" or "0b" to make the number hex or binary respectively !!!not fully implemented
	}

	lists {
		open with"$[" close with "]"
	}

	dictionaries {
		open with "${" close with "}"
	}

	functions {
		follow the format:
		
		func my_function (arg1, arg2) {
			// do something
		}
	}
}

PROGRAM OPTIONS {
	usage: "#[program_option=option_value]"
	values MUST be literals, they can not be references
	
	trailing newlines {
		"terminating_newlines"
	
		controls the number of newlines printed after each print statement, must be a u32
	}
	
	print sep spaces {
		"print_sep_spaces"
	
		controls the number of spaces added after each item in a print statement, must be a u32
	}
}

KEYWORDS {
	- print
	- log
	- func
	- global
	- local
	- dumpscope
	- rm
	- garbage
	- return
	- for
	- in
	- HALT
}

VARIABLES {
	no special syntax for initializing
	
	[varname] = [value];
	
	to use the value contained inside a variable add a "$" before it: my_function($x);
	
	modify a variable by either overwriting it or assignment operations: +=, -=, *=, /=
}

FLAGS FOR VARIALBES {
	internally there are different flags for variables that define behaviors

	the "protected" flag is used to ensure that system objects are always accessable and cannot be overwritten

	the "System" object is one example of this
}